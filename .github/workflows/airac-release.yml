name: Publish AIRAC MBTiles

permissions:
  contents: write
  packages: write

on:
  workflow_dispatch:
    inputs:
      airac_cycle:
        description: "AIRAC cycle (e.g. 2503 or 'latest')"
        required: false
        default: "latest"
      bbox:
        description: "Bounding box coordinates (min_lon min_lat max_lon max_lat)"
        required: true
      zoom:
        description: "Zoom range (min_zoom max_zoom)"
        required: true
        default: "12 12"
      oaci_prefix:
        description: "OACI code prefix for naming (e.g. 'LF' for France)"
        required: true

  schedule:
    - cron: "0 0 * * *"  # Daily at midnight UTC

jobs:
  check-airac:
    runs-on: ubuntu-latest
    outputs:
      is_airac_start: ${{ steps.check.outputs.is_airac_start }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.13"

      - name: Check if AIRAC start date
        id: check
        run: |
          IS_START=$(python utils.py is_start)
          echo "is_airac_start=$IS_START" >> $GITHUB_OUTPUT
          echo "âœ… AIRAC start check result: $IS_START"

  build-and-release-mbtiles:
    runs-on: ubuntu-latest
    needs: check-airac
    if: ${{ github.event_name != 'schedule' || needs.check-airac.outputs.is_airac_start == '1' }}

    steps:

      # â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€
      # Step 1: Prepare some stuff
      # â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€

      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.13"

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt tqdm aiohttp mercantile

      # â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€
      # Step 2: Determine AIRAC
      # â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€
      - name: Determine AIRAC
        id: airac
        run: |
          if [ "${{ github.event.inputs.airac_cycle }}" != "" ] && [ "${{ github.event.inputs.airac_cycle }}" != "latest" ]; then
            echo "airac=${{ github.event.inputs.airac_cycle }}" >> $GITHUB_OUTPUT
            echo "âœ… Using manual AIRAC: ${{ github.event.inputs.airac_cycle }}"
          else
            AIRAC=$(python utils.py airac_current_only)
            echo "airac=$AIRAC" >> $GITHUB_OUTPUT
            echo "âœ… Computed current AIRAC: $AIRAC"
          fi

      # â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€
      # Step 3: Load Regions (auto mode)
      # â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€
      - name: Load regions from JSON
        if: ${{ github.event_name == 'schedule' }}
        id: regions
        run: |
          REGIONS=$(python utils.py regions)
          {
            echo 'REGIONS<<EOF'
            echo "$REGIONS"
            echo 'EOF'
          } >> $GITHUB_ENV
          echo "âœ… Loaded regions:"
          echo "$REGIONS"

      # â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€
      # Step 4: Generate MBTiles
      # â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€
      - name: Generate MBTiles
        run: |
          mkdir -p mbtiles
          if [ "${{ github.event_name }}" == "schedule" ]; then
            IFS=$'\n'
            for REGION in $REGIONS; do
              PREFIX=${REGION%%:*}
              REST=${REGION#*:}
              BBOX=${REST%%:*}
              ZOOM=${REST#*:}
              echo "ðŸ”¹ Generating for $PREFIX (bbox=$BBOX zoom=$ZOOM AIRAC=${{ steps.airac.outputs.airac }})"
              python OFM2MBTiles.py \
                --bbox $(echo $BBOX | tr ',' ' ') \
                --zoom $(echo $ZOOM | tr ',' ' ') \
                --airac ${{ steps.airac.outputs.airac }} \
                --oaci-prefix $PREFIX
            done
            unset IFS
          else
            echo "ðŸ”¹ Manual run for ${{ github.event.inputs.oaci_prefix }} (bbox ${{ github.event.inputs.bbox }} zoom ${{ github.event.inputs.zoom }})"
            python OFM2MBTiles.py \
              --bbox ${{ github.event.inputs.bbox }} \
              --zoom ${{ github.event.inputs.zoom }} \
              --airac ${{ steps.airac.outputs.airac }} \
              --oaci-prefix ${{ github.event.inputs.oaci_prefix }}
          fi

      # â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€
      # Step 5: Collect files
      # â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€
      - name: Get generated files
        id: findfiles
        run: |
          FILES=$(ls -1 mbtiles/*.mbtiles | tr '\n' ' ')
          echo "files=$FILES" >> $GITHUB_OUTPUT
          echo "ðŸ“¦ Found MBTiles files: $FILES"

      # â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€
      # Step 6: Region names (for release)
      # â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€
      - name: Compute region names for release
        id: region_names
        run: |
          if [ "${{ github.event_name }}" == "schedule" ]; then
            REGION_NAMES=$(python utils.py region_names)
            echo "region_names=$REGION_NAMES" >> $GITHUB_OUTPUT
            echo "âœ… Regions for release: $REGION_NAMES"
          else
            REGION_NAMES="${{ github.event.inputs.oaci_prefix }}"
            echo "region_names=$REGION_NAMES" >> $GITHUB_OUTPUT
            echo "âœ… Region for release: $REGION_NAMES"
          fi

      # â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€
      # Step 7: Determine run type
      # â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€
      - name: Automated or Manual run
        id: run_type
        run: |
          if [ "${{ github.event_name }}" == "schedule" ]; then
            TYPE="Automated"
          else
            TYPE="Manual"
          fi
          echo "run_type=$TYPE" >> $GITHUB_OUTPUT
          echo "âœ… Run type: $TYPE"

      # â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€
      # Step 8: Publish release (only main)
      # â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€
      - name: Create GitHub Release
        if: ${{ github.ref == 'refs/heads/main' && env.ACT != 'true' }}
        uses: softprops/action-gh-release@v2
        with:
          tag_name: "AIRAC-${{ steps.airac.outputs.airac }}"
          name: "AIRAC ${{ steps.airac.outputs.airac }}"
          body: |
            **${{ steps.run_type.outputs.run_type }}** release for AIRAC **${{ steps.airac.outputs.airac }}**  
            Regions: ${{ steps.region_names.outputs.region_names }}
          files: ${{ steps.findfiles.outputs.files }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
