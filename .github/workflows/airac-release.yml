name: Publish AIRAC MBTiles

on:
  workflow_dispatch:
    inputs:
      airac_cycle:
        description: "AIRAC cycle (e.g. 2503 or 'latest')"
        required: false
        default: "latest"
      bbox:
        description: "Bounding box coordinates (min_lon min_lat max_lon max_lat)"
        required: true
      zoom:
        description: "Zoom range (min_zoom max_zoom)"
        required: true
        default: "12 12"
      oaci_prefix:
        description: "OACI code prefix for naming (e.g. 'LF' for France)"
        required: true

  schedule:
    - cron: "0 0 * * *"  # daily at midnight UTC; workflow will check 28-day cycle

jobs:
  build-and-release-mbtiles:
    runs-on: ubuntu-latest

    steps:

      # Skip scheduled runs until the correct AIRAC start date
      - name: Skip if not AIRAC start date
        if: ${{ github.event_name == 'schedule' }}
        run: |
          FIRST_AIRAC="2025-01-23"
          TODAY=$(date -u +%F)
          DIFF=$(( ($(date -ud $TODAY +%s) - $(date -ud $FIRST_AIRAC +%s)) / 86400 ))

          if [ $DIFF -lt 0 ] || [ $(( DIFF % 28 )) -ne 0 ]; then
            echo "Today is not an AIRAC start date. Skipping workflow."
            exit 0
          fi
          echo "âœ… Today is AIRAC start date. Proceeding."

      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.13"

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Determine AIRAC
        id: airac
        run: |
          if [ -n "${{ github.event.inputs.airac_cycle }}" ]; then
            # Use manual input if provided
            echo "airac=${{ github.event.inputs.airac_cycle }}" >> $GITHUB_OUTPUT
            echo "âœ… Using manual AIRAC: ${{ github.event.inputs.airac_cycle }}"
          else
            # Compute automatically
            AIRAC=$(python3 - <<'PYTHON'
          from airac_utils import get_current_airac
          airac_cycle, _ = get_current_airac()
          print(airac_cycle)
          PYTHON
          )
            echo "airac=$AIRAC" >> $GITHUB_OUTPUT
            echo "âœ… Computed current AIRAC: $AIRAC"
          fi

      - name: Load regions from JSON
        if: ${{ github.event_name == 'schedule' }}
        id: regions
        run: |
          REGIONS=$(python - <<'PYTHON'
          import json

          with open("pipeline-config.json") as f:
              data = json.load(f)

          regions_list = []
          for prefix, info in data.items():
              bbox_str = ",".join(str(x) for x in info["bbox"])
              zoom_str = ",".join(str(x) for x in info["zoom"])
              regions_list.append(f"{prefix}:{bbox_str}:{zoom_str}")

          print(" ".join(regions_list))
          PYTHON
          )
          echo "REGIONS=$REGIONS" >> $GITHUB_ENV
          echo "âœ… Loaded regions: $REGIONS"

      - name: Generate MBTiles
        run: |
          mkdir -p mbtiles
          if [ "${{ github.event_name }}" == "schedule" ]; then
            # Loop over all regions from JSON
            for REGION in $REGIONS; do
              PREFIX=${REGION%%:*}
              REST=${REGION#*:}
              BBOX=${REST%%:*}
              ZOOM=${REST#*:}
              echo "ðŸ”¹ Generating MBTiles for $PREFIX with bbox $BBOX and zoom $ZOOM (AIRAC ${{ steps.airac.outputs.airac }})"
              python OFM2MBTiles.py \
                --bbox $(echo $BBOX | tr ',' ' ') \
                --zoom $(echo $ZOOM | tr ',' ' ') \
                --airac ${{ steps.airac.outputs.airac }} \
                --oaci-prefix $PREFIX
            done
          else
            # Manual run: use workflow_dispatch inputs
            echo "ðŸ”¹ Generating MBTiles for ${{ github.event.inputs.oaci_prefix }} with bbox ${{ github.event.inputs.bbox }} and zoom ${{ github.event.inputs.zoom }} (AIRAC ${{ steps.airac.outputs.airac }})"
            python OFM2MBTiles.py \
              --bbox ${{ github.event.inputs.bbox }} \
              --zoom ${{ github.event.inputs.zoom }} \
              --airac ${{ steps.airac.outputs.airac }} \
              --oaci-prefix ${{ github.event.inputs.oaci_prefix }}
          fi

      - name: Get generated files
        id: findfiles
        run: |
          FILES=$(ls -1 mbtiles/*.mbtiles | tr '\n' ' ')
          echo "files=$FILES" >> $GITHUB_OUTPUT
          echo "ðŸ“¦ Found MBTiles files: $FILES"

      - name: Create GitHub Release
        if: github.ref == 'refs/heads/main'
        uses: softprops/action-gh-release@v2
        with:
          tag_name: "AIRAC-${{ steps.airac.outputs.airac }}"
          name: "AIRAC ${{ steps.airac.outputs.airac }}"
          body: |
            Automated release for AIRAC cycle **${{ steps.airac.outputs.airac }}**  
            Regions: $(python -c 'import json; data=json.load(open("pipeline-config.json")); print(", ".join(data.keys()))')  
          files: ${{ steps.findfiles.outputs.files }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
